{"version":3,"file":"static/js/975.3e24ed6f.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://my-app/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.jsx","webpack://my-app/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.jsx","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__WZGRt\",\"dialogs_items\":\"Dialogs_dialogs_items__PdCZQ\",\"chat_background\":\"Dialogs_chat_background__0FA5W\",\"messages_items\":\"Dialogs_messages_items__LNhxo\",\"scrollable\":\"Dialogs_scrollable__3WYir\",\"dialog_start\":\"Dialogs_dialog_start__vS7Qx\",\"messages_items_area\":\"Dialogs_messages_items_area__mlfuw\",\"add_message_form\":\"Dialogs_add_message_form__Mf93t\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog_item\":\"DialogItem_dialog_item__Gk5GQ\",\"active\":\"DialogItem_active__wyStN\",\"dialog_item_wrap\":\"DialogItem_dialog_item_wrap__b0VdO\",\"dialog_item_body\":\"DialogItem_dialog_item_body__vjQyJ\",\"subtitle_message\":\"DialogItem_subtitle_message__IPApJ\",\"user_avatar\":\"DialogItem_user_avatar__GLbZa\",\"dialog_title_area\":\"DialogItem_dialog_title_area__MFfL3\",\"dialog_subtitle_area\":\"DialogItem_dialog_subtitle_area__x5-v9\",\"dialog_title\":\"DialogItem_dialog_title__zBBdm\",\"dialog_time\":\"DialogItem_dialog_time__7ljwa\"};","import React from 'react'\r\nimport s from './DialogItem.module.css'\r\nimport { NavLink, useRouteMatch } from 'react-router-dom'\r\nimport avatar from '../../../assets/images/user.png'\r\n\r\n\r\nconst DialogItem = (props) => {\r\n  let path = '/dialogs/' + props.id\r\n\r\n  let match = useRouteMatch('/dialogs/:id')\r\n  let dialogId\r\n  match === null ? dialogId = null : dialogId = parseInt(match.params.id)\r\n\r\n  return (\r\n    <div className={props.id === dialogId ? s.dialog_item + ` ${s.active}` : s.dialog_item}>\r\n      <NavLink to={path}>\r\n        <div className={s.dialog_item_wrap}>\r\n          <div className={s.user_avatar}>\r\n            <img src={avatar} alt='avatar' />\r\n          </div>\r\n          <div className={s.dialog_item_body}>\r\n            <div className={s.dialog_title_area}>\r\n              <div className={s.dialog_title}><b>{props.name}</b></div>\r\n              <div className={s.dialog_time}>{props.time}</div>\r\n            </div>\r\n            <div className={s.dialog_subtitle_area}>\r\n              <div className={s.subtitle_message}>{props.message}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </NavLink>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DialogItem","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__9pd4D\",\"owner\":\"Message_owner__fyegj\",\"message_body\":\"Message_message_body__ObxN+\",\"message_text\":\"Message_message_text__t32oW\",\"time\":\"Message_time__cPS99\"};","import React from 'react';\r\nimport s from './Message.module.css';\r\n\r\nconst Message = (props) => {\r\n  let date = props.date\r\n  let time = `${('0' + date.getHours()).slice(-2)}:${('0' + date.getMinutes()).slice(-2)}`\r\n  return (\r\n    <div className={s.message + ` ${props.owner ? s.owner : ''}`}>\r\n      <div className={s.message_body}>\r\n        <div className={s.message_text}>{props.message}</div>\r\n        <div className={s.time}>\r\n          <span></span>\r\n          <span>{time}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Message;","import React from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport Message from './Message/Message'\r\nimport { Redirect, Route, Switch, useRouteMatch } from 'react-router-dom'\r\nimport { useForm } from 'react-hook-form'\r\n\r\n\r\nconst Dialogs = (props) => {\r\n  let state = props.dialogsPage;\r\n  state.dialogs.sort((a, b) => a.dialog_id - b.dialog_id)\r\n\r\n  let match = useRouteMatch('/dialogs/:id')\r\n\r\n  let filterMessages = state.dialogs.filter((el) => {\r\n    if (match === null) {\r\n      return state.dialogs[0]\r\n    }\r\n    return el.dialog_id === parseInt(match.params.id)\r\n  })\r\n\r\n  let messagesElements = filterMessages[0].chat_history.map(m => <Message\r\n    key={m.message_id}\r\n    message={m.message_text}\r\n    owner={m.owner}\r\n    date={m.message_date}\r\n  />)\r\n\r\n  let dialogsElements = state.dialogs.map(el => {\r\n    let last_message = el.chat_history[el.chat_history.length - 1].message_text\r\n    let date = el.chat_history[el.chat_history.length - 1].message_date\r\n    let time\r\n    let dateNow = new Date().getDate()\r\n    let monthNow = new Date().getMonth()\r\n    let yearNow = new Date().getFullYear()\r\n\r\n    if (dateNow === date.getDate() && monthNow === date.getMonth() && yearNow === date.getFullYear()) {\r\n      time = Intl.DateTimeFormat('en-GB', { hour: '2-digit', minute: 'numeric', hour12: false }).format(date)\r\n    } else if ((dateNow !== date.getDate() || monthNow !== date.getMonth()) && yearNow === date.getFullYear()) {\r\n      time = Intl.DateTimeFormat('en-GB', { month: 'short', day: '2-digit' }).format(date)\r\n    } else if (yearNow !== date.getFullYear()) {\r\n      time = Intl.DateTimeFormat('en-GB', { day: '2-digit', month: '2-digit', year: 'numeric' }).format(date)\r\n    }\r\n\r\n    return <DialogItem\r\n      key={el.dialog_id}\r\n      name={el.user_name}\r\n      id={el.dialog_id}\r\n      message={last_message}\r\n      time={time}\r\n    />\r\n  })\r\n\r\n  if (!props.isAuth) return <Redirect to={'/login'} />\r\n\r\n  const AddMessageForm = () => {\r\n    const { register, handleSubmit } = useForm()\r\n    const onSubmit = (data) => {\r\n      data = {\r\n        ...data,\r\n        id: parseInt(match.params.id),\r\n        owner: true,\r\n        message_date: new Date()\r\n      }\r\n      props.addMessage(data)\r\n    }\r\n\r\n    return (\r\n      <form className={s.add_message_form} onSubmit={handleSubmit(onSubmit)}>\r\n        <input {...register('newMessageBody', { maxLength: 1000 })}\r\n          placeholder='Message' autoFocus />\r\n        <div><button type='submit'>Send</button></div>\r\n      </form>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogs_items}>{dialogsElements}</div>\r\n      <div className={s.messages_items}>\r\n        <div className={s.scrollable}>\r\n          <Switch>\r\n            <Route exact path={'/dialogs/'} render={() => {\r\n              return <div className={s.dialog_start}>select chat to start a conversation</div>\r\n            }} />\r\n            <Route path={'/dialogs/:id'} render={() => {\r\n              return <div className={s.messages_items_area}>\r\n                {messagesElements}\r\n                <AddMessageForm />\r\n              </div>\r\n            }} />\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dialogs","import React from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToPropsForRedirect = (state) => { \r\n  return {\r\n    isAuth: state.auth.isAuth\r\n  }\r\n}\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) return <Redirect to={'/login'} />\r\n      \r\n      return <Component {...this.props} />\r\n    }\r\n  }\r\n\r\n  let ConnectedWithAuthRedirect = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n  return ConnectedWithAuthRedirect;\r\n}","import { addMessage } from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, { addMessage }),\r\n  withAuthRedirect)\r\n  (Dialogs)"],"names":["props","dialogId","path","id","match","useRouteMatch","parseInt","params","className","s","to","src","avatar","alt","name","time","message","date","getHours","slice","getMinutes","owner","state","dialogsPage","dialogs","sort","a","b","dialog_id","messagesElements","filter","el","chat_history","map","m","message_text","message_date","message_id","dialogsElements","last_message","length","dateNow","Date","getDate","monthNow","getMonth","yearNow","getFullYear","Intl","DateTimeFormat","hour","minute","hour12","format","day","month","year","user_name","isAuth","AddMessageForm","useForm","register","handleSubmit","onSubmit","data","addMessage","maxLength","placeholder","autoFocus","type","exact","render","mapStateToPropsForRedirect","auth","compose","connect","Component","RedirectComponent","this","React","Dialogs"],"sourceRoot":""}